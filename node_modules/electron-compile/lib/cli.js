#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var main = exports.main = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(appDir, sourceDirs, cacheDir) {
    var _this = this;

    var compilerHost, rootCacheDir;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            compilerHost = null;

            if (!cacheDir || cacheDir.length < 1) {
              cacheDir = '.cache';
            }

            rootCacheDir = _path2.default.join(appDir, cacheDir);

            _mkdirp2.default.sync(rootCacheDir);

            if (process.env.NODE_ENV !== 'production') {
              console.log('Using NODE_ENV = ' + (process.env.NODE_ENV || 'development'));
            }

            d('main: ' + appDir + ', ' + (0, _stringify2.default)(sourceDirs));
            _context2.prev = 6;
            _context2.next = 9;
            return (0, _configParser.createCompilerHostFromProjectRoot)(appDir, rootCacheDir);

          case 9:
            compilerHost = _context2.sent;
            _context2.next = 17;
            break;

          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2['catch'](6);

            console.error('Couldn\'t set up compilers: ' + _context2.t0.message);
            d(_context2.t0.stack);

            throw _context2.t0;

          case 17:
            _context2.next = 19;
            return _promise2.default.all(_lodash2.default.map(sourceDirs, function (dir) {
              return (0, _forAllFiles.forAllFiles)(dir, function () {
                var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(f) {
                  return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;

                          d('Starting compilation for ' + f);
                          _context.next = 4;
                          return compilerHost.compile(f);

                        case 4:
                          _context.next = 11;
                          break;

                        case 6:
                          _context.prev = 6;
                          _context.t0 = _context['catch'](0);

                          console.error('Failed to compile file: ' + f);
                          console.error(_context.t0.message);

                          d(_context.t0.stack);

                        case 11:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, _this, [[0, 6]]);
                }));
                return function (_x4) {
                  return ref.apply(this, arguments);
                };
              }());
            }));

          case 19:

            d('Saving out configuration');
            _context2.next = 22;
            return compilerHost.saveConfiguration();

          case 22:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[6, 12]]);
  }));
  return function main(_x, _x2, _x3) {
    return ref.apply(this, arguments);
  };
}();

require('./babel-maybefill');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _configParser = require('./config-parser');

var _forAllFiles = require('./for-all-files');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.on('unhandledRejection', function (e) {
  d(e.message || e);
  d(e.stack || '');
});

process.on('uncaughtException', function (e) {
  d(e.message || e);
  d(e.stack || '');
});

var d = require('debug')('electron-compile');

var yargs = require('yargs').usage('Usage: electron-compile --appdir [root-app-dir] paths...').alias('a', 'appdir').describe('a', 'The top-level application directory (i.e. where your package.json is)').default('a', process.cwd()).alias('c', 'cachedir').describe('c', 'The directory to put the cache').default('c', '.cache').help('h').alias('h', 'help').epilog('Copyright 2015');

if (process.mainModule === module) {
  var argv = yargs.argv;

  if (!argv._ || argv._.length < 1) {
    yargs.showHelp();
    process.exit(-1);
  }

  var sourceDirs = argv._;
  var appDir = argv.a;
  var cacheDir = argv.c;

  main(appDir, sourceDirs, cacheDir).then(function () {
    return process.exit(0);
  }).catch(function (e) {
    console.error(e.message || e);
    d(e.stack);

    console.error("Compilation failed!\nFor extra information, set the DEBUG environment variable to '*'");
    process.exit(-1);
  });
}
//# sourceMappingURL=data:application/json;base64,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QVNMLEdBVEssRUFTQSxNQVRBLEVBVVgsTUFWVyxDQVVKLGdCQVZJLENBQWQ7O0FBWUEsSUFBSSxRQUFRLFVBQVIsS0FBdUIsTUFBM0IsRUFBbUM7QUFDakMsTUFBTSxPQUFPLE1BQU0sSUFBbkI7O0FBRUEsTUFBSSxDQUFDLEtBQUssQ0FBTixJQUFXLEtBQUssQ0FBTCxDQUFPLE1BQVAsR0FBZ0IsQ0FBL0IsRUFBa0M7QUFDaEMsVUFBTSxRQUFOO0FBQ0EsWUFBUSxJQUFSLENBQWEsQ0FBQyxDQUFkO0FBQ0Q7O0FBRUQsTUFBTSxhQUFhLEtBQUssQ0FBeEI7QUFDQSxNQUFNLFNBQVMsS0FBSyxDQUFwQjtBQUNBLE1BQU0sV0FBVyxLQUFLLENBQXRCOztBQUVBLE9BQUssTUFBTCxFQUFhLFVBQWIsRUFBeUIsUUFBekIsRUFDRyxJQURILENBQ1E7QUFBQSxXQUFNLFFBQVEsSUFBUixDQUFhLENBQWIsQ0FBTjtBQUFBLEdBRFIsRUFFRyxLQUZILENBRVMsVUFBQyxDQUFELEVBQU87QUFDWixZQUFRLEtBQVIsQ0FBYyxFQUFFLE9BQUYsSUFBYSxDQUEzQjtBQUNBLE1BQUUsRUFBRSxLQUFKOztBQUVBLFlBQVEsS0FBUixDQUFjLHVGQUFkO0FBQ0EsWUFBUSxJQUFSLENBQWEsQ0FBQyxDQUFkO0FBQ0QsR0FSSDtBQVNEIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0ICcuL2JhYmVsLW1heWJlZmlsbCc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgbWtkaXJwIGZyb20gJ21rZGlycCc7XHJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcblxyXG5pbXBvcnQge2NyZWF0ZUNvbXBpbGVySG9zdEZyb21Qcm9qZWN0Um9vdH0gZnJvbSAnLi9jb25maWctcGFyc2VyJztcclxuaW1wb3J0IHtmb3JBbGxGaWxlc30gZnJvbSAnLi9mb3ItYWxsLWZpbGVzJztcclxuXHJcbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChlKSA9PiB7XHJcbiAgZChlLm1lc3NhZ2UgfHwgZSk7XHJcbiAgZChlLnN0YWNrIHx8ICcnKTtcclxufSk7XHJcblxyXG5wcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIChlKSA9PiB7XHJcbiAgZChlLm1lc3NhZ2UgfHwgZSk7XHJcbiAgZChlLnN0YWNrIHx8ICcnKTtcclxufSk7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihhcHBEaXIsIHNvdXJjZURpcnMsIGNhY2hlRGlyKSB7XHJcbiAgbGV0IGNvbXBpbGVySG9zdCA9IG51bGw7XHJcbiAgaWYgKCFjYWNoZURpciB8fCBjYWNoZURpci5sZW5ndGggPCAxKSB7XHJcbiAgICBjYWNoZURpciA9ICcuY2FjaGUnO1xyXG4gIH1cclxuXHJcbiAgbGV0IHJvb3RDYWNoZURpciA9IHBhdGguam9pbihhcHBEaXIsIGNhY2hlRGlyKTtcclxuICBta2RpcnAuc3luYyhyb290Q2FjaGVEaXIpO1xyXG5cclxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgY29uc29sZS5sb2coYFVzaW5nIE5PREVfRU5WID0gJHtwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnfWApO1xyXG4gIH1cclxuXHJcbiAgZChgbWFpbjogJHthcHBEaXJ9LCAke0pTT04uc3RyaW5naWZ5KHNvdXJjZURpcnMpfWApO1xyXG4gIHRyeSB7XHJcbiAgICBjb21waWxlckhvc3QgPSBhd2FpdCBjcmVhdGVDb21waWxlckhvc3RGcm9tUHJvamVjdFJvb3QoYXBwRGlyLCByb290Q2FjaGVEaXIpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkbid0IHNldCB1cCBjb21waWxlcnM6ICR7ZS5tZXNzYWdlfWApO1xyXG4gICAgZChlLnN0YWNrKTtcclxuXHJcbiAgICB0aHJvdyBlO1xyXG4gIH1cclxuXHJcbiAgYXdhaXQgUHJvbWlzZS5hbGwoXy5tYXAoc291cmNlRGlycywgKGRpcikgPT4gZm9yQWxsRmlsZXMoZGlyLCBhc3luYyAoZikgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgZChgU3RhcnRpbmcgY29tcGlsYXRpb24gZm9yICR7Zn1gKTtcclxuICAgICAgYXdhaXQgY29tcGlsZXJIb3N0LmNvbXBpbGUoZik7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjb21waWxlIGZpbGU6ICR7Zn1gKTtcclxuICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xyXG5cclxuICAgICAgZChlLnN0YWNrKTtcclxuICAgIH1cclxuICB9KSkpO1xyXG5cclxuICBkKCdTYXZpbmcgb3V0IGNvbmZpZ3VyYXRpb24nKTtcclxuICBhd2FpdCBjb21waWxlckhvc3Quc2F2ZUNvbmZpZ3VyYXRpb24oKTtcclxufVxyXG5cclxuY29uc3QgZCA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VsZWN0cm9uLWNvbXBpbGUnKTtcclxuXHJcbmNvbnN0IHlhcmdzID0gcmVxdWlyZSgneWFyZ3MnKVxyXG4gIC51c2FnZSgnVXNhZ2U6IGVsZWN0cm9uLWNvbXBpbGUgLS1hcHBkaXIgW3Jvb3QtYXBwLWRpcl0gcGF0aHMuLi4nKVxyXG4gIC5hbGlhcygnYScsICdhcHBkaXInKVxyXG4gIC5kZXNjcmliZSgnYScsICdUaGUgdG9wLWxldmVsIGFwcGxpY2F0aW9uIGRpcmVjdG9yeSAoaS5lLiB3aGVyZSB5b3VyIHBhY2thZ2UuanNvbiBpcyknKVxyXG4gIC5kZWZhdWx0KCdhJywgcHJvY2Vzcy5jd2QoKSlcclxuICAuYWxpYXMoJ2MnLCAnY2FjaGVkaXInKVxyXG4gIC5kZXNjcmliZSgnYycsICdUaGUgZGlyZWN0b3J5IHRvIHB1dCB0aGUgY2FjaGUnKVxyXG4gIC5kZWZhdWx0KCdjJywgJy5jYWNoZScpXHJcbiAgLmhlbHAoJ2gnKVxyXG4gIC5hbGlhcygnaCcsICdoZWxwJylcclxuICAuZXBpbG9nKCdDb3B5cmlnaHQgMjAxNScpO1xyXG5cclxuaWYgKHByb2Nlc3MubWFpbk1vZHVsZSA9PT0gbW9kdWxlKSB7XHJcbiAgY29uc3QgYXJndiA9IHlhcmdzLmFyZ3Y7XHJcblxyXG4gIGlmICghYXJndi5fIHx8IGFyZ3YuXy5sZW5ndGggPCAxKSB7XHJcbiAgICB5YXJncy5zaG93SGVscCgpO1xyXG4gICAgcHJvY2Vzcy5leGl0KC0xKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHNvdXJjZURpcnMgPSBhcmd2Ll87XHJcbiAgY29uc3QgYXBwRGlyID0gYXJndi5hO1xyXG4gIGNvbnN0IGNhY2hlRGlyID0gYXJndi5jO1xyXG5cclxuICBtYWluKGFwcERpciwgc291cmNlRGlycywgY2FjaGVEaXIpXHJcbiAgICAudGhlbigoKSA9PiBwcm9jZXNzLmV4aXQoMCkpXHJcbiAgICAuY2F0Y2goKGUpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UgfHwgZSk7XHJcbiAgICAgIGQoZS5zdGFjayk7XHJcblxyXG4gICAgICBjb25zb2xlLmVycm9yKFwiQ29tcGlsYXRpb24gZmFpbGVkIVxcbkZvciBleHRyYSBpbmZvcm1hdGlvbiwgc2V0IHRoZSBERUJVRyBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byAnKidcIik7XHJcbiAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XHJcbiAgICB9KTtcclxufVxyXG4iXX0=