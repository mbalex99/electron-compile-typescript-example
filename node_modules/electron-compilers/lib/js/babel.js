'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _compilerBase = require('../compiler-base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mimeTypes = ['text/jsx', 'application/javascript'];
var babel = null;

/**
 * @access private
 */

var BabelCompiler = function (_CompilerBase) {
  _inherits(BabelCompiler, _CompilerBase);

  function BabelCompiler() {
    _classCallCheck(this, BabelCompiler);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(BabelCompiler).call(this));
  }

  _createClass(BabelCompiler, [{
    key: 'shouldCompileFile',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(fileName, compilerContext) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt('return', true);

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function shouldCompileFile(_x, _x2) {
        return ref.apply(this, arguments);
      }

      return shouldCompileFile;
    }()
  }, {
    key: 'determineDependentFiles',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(sourceCode, filePath, compilerContext) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', []);

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function determineDependentFiles(_x3, _x4, _x5) {
        return ref.apply(this, arguments);
      }

      return determineDependentFiles;
    }()

    // NB: This method exists to stop Babel from trying to load plugins from the
    // app's node_modules directory, which in a production app doesn't have Babel
    // installed in it. Instead, we try to load from our entry point's node_modules
    // directory (i.e. Grunt perhaps), and if it doesn't work, just keep going.

  }, {
    key: 'attemptToPreload',
    value: function attemptToPreload(names, prefix) {
      var preloadStrategies = [function () {
        return _lodash2.default.map(names, function (x) {
          return require.main.require('babel-' + prefix + '-' + x);
        });
      }, function () {
        var nodeModulesAboveUs = _path2.default.resolve(__dirname, '..', '..', '..');
        return _lodash2.default.map(names, function (x) {
          return require(_path2.default.join(nodeModulesAboveUs, 'babel-' + prefix + '-' + x));
        });
      }, function () {
        return _lodash2.default.map(names, function (x) {
          return require('babel-' + prefix + '-' + x);
        });
      }];

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = preloadStrategies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var strategy = _step.value;

          try {
            var ret = strategy();

            // NB: Some plugins like transform-decorators-legacy, use import/export
            // semantics, and others don't
            if ('default' in ret) ret = ret['default'];
            return ret;
          } catch (e) {
            continue;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
  }, {
    key: 'compile',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(sourceCode, filePath, compilerContext) {
        var opts, plugins, presets;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                babel = babel || require('babel-core');

                opts = _lodash2.default.extend({}, this.compilerOptions, {
                  filename: filePath,
                  ast: false,
                  babelrc: false
                });


                if ('plugins' in opts) {
                  plugins = this.attemptToPreload(opts.plugins, 'plugin');

                  if (plugins && plugins.length === opts.plugins.length) opts.plugins = plugins;
                }

                if ('presets' in opts) {
                  presets = this.attemptToPreload(opts.presets, 'preset');

                  if (presets && presets.length === opts.presets.length) opts.presets = presets;
                }

                return _context3.abrupt('return', {
                  code: babel.transform(sourceCode, opts).code,
                  mimeType: 'application/javascript'
                });

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function compile(_x6, _x7, _x8) {
        return ref.apply(this, arguments);
      }

      return compile;
    }()
  }, {
    key: 'shouldCompileFileSync',
    value: function shouldCompileFileSync(fileName, compilerContext) {
      return true;
    }
  }, {
    key: 'determineDependentFilesSync',
    value: function determineDependentFilesSync(sourceCode, filePath, compilerContext) {
      return [];
    }
  }, {
    key: 'compileSync',
    value: function compileSync(sourceCode, filePath, compilerContext) {
      babel = babel || require('babel-core');

      var opts = _lodash2.default.extend({}, this.compilerOptions, {
        filename: filePath,
        ast: false,
        babelrc: false
      });

      if ('plugins' in opts) {
        var plugins = this.attemptToPreload(opts.plugins, 'plugin');
        if (plugins && plugins.length === opts.plugins.length) opts.plugins = plugins;
      }

      if ('presets' in opts) {
        var presets = this.attemptToPreload(opts.presets, 'preset');
        if (presets && presets.length === opts.presets.length) opts.presets = presets;
      }

      return {
        code: babel.transform(sourceCode, opts).code,
        mimeType: 'application/javascript'
      };
    }
  }, {
    key: 'getCompilerVersion',
    value: function getCompilerVersion() {
      return require('babel-core/package.json').version;
    }
  }], [{
    key: 'getInputMimeTypes',
    value: function getInputMimeTypes() {
      return mimeTypes;
    }
  }]);

  return BabelCompiler;
}(_compilerBase.CompilerBase);

exports.default = BabelCompiler;