'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mimeTypes = require('@paulcbetts/mime-types');

var _mimeTypes2 = _interopRequireDefault(_mimeTypes);

var _compilerBase = require('../compiler-base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var inputMimeTypes = ['text/html'];
var cheerio = null;

var d = require('debug')('electron-compile:inline-html');

/**
 * @access private
 */

var InlineHtmlCompiler = function (_CompilerBase) {
  _inherits(InlineHtmlCompiler, _CompilerBase);

  function InlineHtmlCompiler(compileBlock, compileBlockSync) {
    _classCallCheck(this, InlineHtmlCompiler);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InlineHtmlCompiler).call(this));

    _this.compileBlock = compileBlock;
    _this.compileBlockSync = compileBlockSync;
    return _this;
  }

  _createClass(InlineHtmlCompiler, [{
    key: 'shouldCompileFile',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(fileName, compilerContext) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt('return', true);

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function shouldCompileFile(_x, _x2) {
        return ref.apply(this, arguments);
      }

      return shouldCompileFile;
    }()
  }, {
    key: 'determineDependentFiles',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(sourceCode, filePath, compilerContext) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', []);

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function determineDependentFiles(_x3, _x4, _x5) {
        return ref.apply(this, arguments);
      }

      return determineDependentFiles;
    }()
  }, {
    key: 'each',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(nodes, selector) {
        var acc;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                acc = [];

                nodes.each(function (i, el) {
                  var promise = selector(i, el);
                  if (!promise) return false;

                  acc.push(promise);
                  return true;
                });

                _context3.next = 4;
                return Promise.all(acc);

              case 4:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function each(_x6, _x7) {
        return ref.apply(this, arguments);
      }

      return each;
    }()
  }, {
    key: 'eachSync',
    value: function eachSync(nodes, selector) {
      // NB: This method is here just so it's easier to mechanically
      // translate the async compile to compileSync
      return nodes.each(function (i, el) {
        selector(i, el);
        return true;
      });
    }
  }, {
    key: 'compile',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(sourceCode, filePath, compilerContext) {
        var _this2 = this;

        var $, toWait, that, styleCount, scriptCount;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                cheerio = cheerio || require('cheerio');
                $ = cheerio.load(sourceCode);
                toWait = [];
                that = this;
                styleCount = 0;

                toWait.push(this.each($('style'), function () {
                  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(i, el) {
                    var mimeType, thisCtx, origText, newText;
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            mimeType = $(el).attr('type') || 'text/plain';
                            thisCtx = _lodash2.default.assign({
                              count: styleCount++,
                              tag: 'style'
                            }, compilerContext);
                            origText = $(el).text();
                            _context4.next = 5;
                            return that.compileBlock(origText, filePath, mimeType, thisCtx);

                          case 5:
                            newText = _context4.sent;


                            if (origText !== newText) {
                              $(el).text(newText);
                              $(el).attr('type', 'text/css');
                            }

                          case 7:
                          case 'end':
                            return _context4.stop();
                        }
                      }
                    }, _callee4, _this2);
                  }));

                  return function (_x11, _x12) {
                    return ref.apply(this, arguments);
                  };
                }()));

                scriptCount = 0;

                toWait.push(this.each($('script'), function () {
                  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(i, el) {
                    var src, thisCtx, mimeType, origText, newText;
                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            src = $(el).attr('src');

                            if (!(src && src.length > 2)) {
                              _context5.next = 4;
                              break;
                            }

                            $(el).attr('src', InlineHtmlCompiler.fixupRelativeUrl(src));
                            return _context5.abrupt('return');

                          case 4:
                            thisCtx = _lodash2.default.assign({
                              count: scriptCount++,
                              tag: 'script'
                            }, compilerContext);
                            mimeType = $(el).attr('type') || 'application/javascript';
                            origText = $(el).text();
                            _context5.next = 9;
                            return that.compileBlock(origText, filePath, mimeType, thisCtx);

                          case 9:
                            newText = _context5.sent;


                            if (origText !== newText) {
                              $(el).text(newText);
                              $(el).attr('type', 'application/javascript');
                            }

                          case 11:
                          case 'end':
                            return _context5.stop();
                        }
                      }
                    }, _callee5, _this2);
                  }));

                  return function (_x13, _x14) {
                    return ref.apply(this, arguments);
                  };
                }()));

                $('link').map(function (i, el) {
                  var href = $(el).attr('href');
                  if (href && href.length > 2) {
                    $(el).attr('href', InlineHtmlCompiler.fixupRelativeUrl(href));
                  }
                });

                $('x-require').map(function (i, el) {
                  var src = $(el).attr('src');

                  // File URL? Bail
                  if (src.match(/^file:/i)) return;

                  // Absolute path? Bail.
                  if (src.match(/^([\/]|[A-Za-z]:)/i)) return;

                  try {
                    $(el).attr('src', _path2.default.resolve(_path2.default.dirname(filePath), src));
                  } catch (e) {
                    $(el).text(e.message + '\n' + e.stack);
                  }
                });

                _context6.next = 12;
                return Promise.all(toWait);

              case 12:
                return _context6.abrupt('return', {
                  code: $.html(),
                  mimeType: 'text/html'
                });

              case 13:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function compile(_x8, _x9, _x10) {
        return ref.apply(this, arguments);
      }

      return compile;
    }()
  }, {
    key: 'shouldCompileFileSync',
    value: function shouldCompileFileSync(fileName, compilerContext) {
      return true;
    }
  }, {
    key: 'determineDependentFilesSync',
    value: function determineDependentFilesSync(sourceCode, filePath, compilerContext) {
      return [];
    }
  }, {
    key: 'compileSync',
    value: function compileSync(sourceCode, filePath, compilerContext) {
      var _this3 = this;

      cheerio = cheerio || require('cheerio');
      var $ = cheerio.load(sourceCode);

      var that = this;
      var styleCount = 0;
      this.eachSync($('style'), function () {
        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(i, el) {
          var mimeType, thisCtx, origText, newText;
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  mimeType = $(el).attr('type');
                  thisCtx = _lodash2.default.assign({
                    count: styleCount++,
                    tag: 'style'
                  }, compilerContext);
                  origText = $(el).text();
                  newText = that.compileBlockSync(origText, filePath, mimeType, thisCtx);


                  if (origText !== newText) {
                    $(el).text(newText);
                    $(el).attr('type', 'text/css');
                  }

                case 5:
                case 'end':
                  return _context7.stop();
              }
            }
          }, _callee7, _this3);
        }));

        return function (_x15, _x16) {
          return ref.apply(this, arguments);
        };
      }());

      var scriptCount = 0;
      this.eachSync($('script'), function () {
        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(i, el) {
          var src, thisCtx, mimeType, oldText, newText;
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  src = $(el).attr('src');

                  if (!(src && src.length > 2)) {
                    _context8.next = 4;
                    break;
                  }

                  $(el).attr('src', InlineHtmlCompiler.fixupRelativeUrl(src));
                  return _context8.abrupt('return');

                case 4:
                  thisCtx = _lodash2.default.assign({
                    count: scriptCount++,
                    tag: 'script'
                  }, compilerContext);
                  mimeType = $(el).attr('type');
                  oldText = $(el).text();
                  newText = that.compileBlockSync(oldText, filePath, mimeType, thisCtx);


                  if (oldText !== newText) {
                    $(el).text(newText);
                    $(el).attr('type', 'application/javascript');
                  }

                case 9:
                case 'end':
                  return _context8.stop();
              }
            }
          }, _callee8, _this3);
        }));

        return function (_x17, _x18) {
          return ref.apply(this, arguments);
        };
      }());

      $('link').map(function (i, el) {
        var href = $(el).attr('href');
        if (href && href.length > 2) {
          $(el).attr('href', InlineHtmlCompiler.fixupRelativeUrl(href));
        }
      });

      $('x-require').map(function (i, el) {
        var src = $(el).attr('src');

        // File URL? Bail
        if (src.match(/^file:/i)) return;

        // Absolute path? Bail.
        if (src.match(/^([\/]|[A-Za-z]:)/i)) return;

        try {
          $(el).attr('src', _path2.default.resolve(_path2.default.dirname(filePath), src));
        } catch (e) {
          $(el).text(e.message + '\n' + e.stack);
        }
      });

      return {
        code: $.html(),
        mimeType: 'text/html'
      };
    }
  }, {
    key: 'getCompilerVersion',
    value: function getCompilerVersion() {
      var thisVersion = require('../../package.json').version;
      var otherVersions = _lodash2.default.map(this.allCompilers, function (x) {
        return x.getCompilerVersion;
      }).join();

      return thisVersion + ',' + otherVersions;
    }
  }], [{
    key: 'createFromCompilers',
    value: function createFromCompilers(compilersByMimeType) {
      var _this4 = this;

      d('Setting up inline HTML compilers: ' + JSON.stringify(Object.keys(compilersByMimeType)));

      var compileBlock = function () {
        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee9(sourceCode, filePath, mimeType, ctx) {
          var realType, compiler, ext, fakeFile;
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  realType = mimeType;

                  if (!mimeType && ctx.tag === 'script') realType = 'application/javascript';

                  if (realType) {
                    _context9.next = 4;
                    break;
                  }

                  return _context9.abrupt('return', sourceCode);

                case 4:
                  compiler = compilersByMimeType[realType] || compilersByMimeType['text/plain'];
                  ext = _mimeTypes2.default.extension(realType);
                  fakeFile = filePath + ':inline_' + ctx.count + '.' + ext;


                  d('Compiling inline block for ' + filePath + ' with mimeType ' + mimeType);
                  _context9.next = 10;
                  return compiler.shouldCompileFile(fakeFile, ctx);

                case 10:
                  if (_context9.sent) {
                    _context9.next = 12;
                    break;
                  }

                  return _context9.abrupt('return', sourceCode);

                case 12:
                  _context9.next = 14;
                  return compiler.compileSync(sourceCode, fakeFile, ctx);

                case 14:
                  return _context9.abrupt('return', _context9.sent.code);

                case 15:
                case 'end':
                  return _context9.stop();
              }
            }
          }, _callee9, _this4);
        }));

        return function compileBlock(_x19, _x20, _x21, _x22) {
          return ref.apply(this, arguments);
        };
      }();

      var compileBlockSync = function compileBlockSync(sourceCode, filePath, mimeType, ctx) {
        var realType = mimeType;
        if (!mimeType && ctx.tag === 'script') realType = 'application/javascript';

        if (!realType) return sourceCode;

        var compiler = compilersByMimeType[realType] || compilersByMimeType['text/plain'];
        var ext = _mimeTypes2.default.extension(realType);
        var fakeFile = filePath + ':inline_' + ctx.count + '.' + ext;

        d('Compiling inline block for ' + filePath + ' with mimeType ' + mimeType);
        if (!compiler.shouldCompileFileSync(fakeFile, ctx)) return sourceCode;
        return compiler.compileSync(sourceCode, fakeFile, ctx).code;
      };

      return new InlineHtmlCompiler(compileBlock, compileBlockSync);
    }
  }, {
    key: 'getInputMimeTypes',
    value: function getInputMimeTypes() {
      return inputMimeTypes;
    }
  }, {
    key: 'fixupRelativeUrl',
    value: function fixupRelativeUrl(url) {
      if (!url.match(/^\/\//)) return url;
      return 'https:' + url;
    }
  }]);

  return InlineHtmlCompiler;
}(_compilerBase.CompilerBase);

exports.default = InlineHtmlCompiler;