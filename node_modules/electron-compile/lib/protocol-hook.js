'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.rigHtmlDocumentToInitializeElectronCompile = rigHtmlDocumentToInitializeElectronCompile;
exports.initializeProtocolHook = initializeProtocolHook;

require('./babel-maybefill');

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mimeTypes = require('@paulcbetts/mime-types');

var _mimeTypes2 = _interopRequireDefault(_mimeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var magicWords = "__magic__file__to__help__electron__compile.js";

// NB: These are duped in initialize-renderer so we can save startup time, make
// sure to run both!
var magicGlobalForRootCacheDir = '__electron_compile_root_cache_dir';
var magicGlobalForAppRootDir = '__electron_compile_app_root_dir';

var d = require('debug')('electron-compile:protocol-hook');

var protocol = null;

/**
 * Adds our script header to the top of all HTML files
 *
 * @private
 */
function rigHtmlDocumentToInitializeElectronCompile(doc) {
  var lines = doc.split("\n");
  var replacement = '<head><script src="' + magicWords + '"></script>';
  var replacedHead = false;

  for (var i = 0; i < lines.length; i++) {
    if (!lines[i].match(/<head>/i)) continue;

    lines[i] = lines[i].replace(/<head>/i, replacement);
    replacedHead = true;
    break;
  }

  if (!replacedHead) {
    replacement = '<html$1><head><script src="' + magicWords + '"></script></head>';
    for (var _i = 0; _i < lines.length; _i++) {
      if (!lines[_i].match(/<html/i)) continue;

      lines[_i] = lines[_i].replace(/<html([^>]+)>/i, replacement);
      break;
    }
  }

  return lines.join("\n");
}

function requestFileJob(filePath, finish) {
  _fs2.default.readFile(filePath, function (err, buf) {
    if (err) {
      if (err.errno === 34) {
        finish(-6); // net::ERR_FILE_NOT_FOUND
        return;
      } else {
        finish(-2); // net::FAILED
        return;
      }
    }

    finish({
      data: buf,
      mimeType: _mimeTypes2.default.lookup(filePath) || 'text/plain'
    });
  });
}

/**
 * Initializes the protocol hook on file: that allows us to intercept files
 * loaded by Chromium and rewrite them. This method along with
 * {@link registerRequireExtension} are the top-level methods that electron-compile
 * actually uses to intercept code that Electron loads.
 *
 * @param  {CompilerHost} compilerHost  The compiler host to use for compilation.
 */
function initializeProtocolHook(compilerHost) {
  protocol = protocol || require('electron').protocol;

  global[magicGlobalForRootCacheDir] = compilerHost.rootCacheDir;
  global[magicGlobalForAppRootDir] = compilerHost.appRoot;

  var electronCompileSetupCode = 'if (window.require) require(\'electron-compile/lib/initialize-renderer\').initializeRendererProcess(' + compilerHost.readOnlyMode + ');';

  protocol.interceptBufferProtocol('file', function () {
    var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(request, finish) {
      var uri, filePath, _ret, result, err;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              uri = _url2.default.parse(request.url);


              d('Intercepting url ' + request.url);

              if (!(request.url.indexOf(magicWords) > -1)) {
                _context.next = 5;
                break;
              }

              finish({
                mimeType: 'application/javascript',
                data: new Buffer(electronCompileSetupCode, 'utf8')
              });

              return _context.abrupt('return');

            case 5:
              if (!(uri.host && uri.host.length > 1)) {
                _context.next = 9;
                break;
              }

              //let newUri = request.url.replace(/^file:/, "https:");
              // TODO: Jump off this bridge later
              d('TODO: Found bogus protocol-relative URL, can\'t fix it up!!');
              finish(-2);
              return _context.abrupt('return');

            case 9:
              filePath = decodeURIComponent(uri.pathname);

              // NB: pathname has a leading '/' on Win32 for some reason

              if (process.platform === 'win32') {
                filePath = filePath.slice(1);
              }

              // NB: Special-case files coming from atom.asar or node_modules

              if (!(filePath.match(/[\/\\](atom|electron).asar/) || filePath.match(/[\/\\](node_modules|bower_components)/))) {
                _context.next = 18;
                break;
              }

              if (!filePath.match(/\.html?$/i)) {
                _context.next = 16;
                break;
              }

              _ret = function () {
                var riggedContents = null;
                _fs2.default.readFile(filePath, 'utf8', function (err, contents) {
                  if (err) {
                    if (err.errno === 34) {
                      finish(-6); // net::ERR_FILE_NOT_FOUND
                      return;
                    } else {
                      finish(-2); // net::FAILED
                      return;
                    }
                  }

                  riggedContents = rigHtmlDocumentToInitializeElectronCompile(contents);
                  finish({ data: new Buffer(riggedContents), mimeType: 'text/html' });
                  return;
                });

                return {
                  v: void 0
                };
              }();

              if (!((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object")) {
                _context.next = 16;
                break;
              }

              return _context.abrupt('return', _ret.v);

            case 16:

              requestFileJob(filePath, finish);
              return _context.abrupt('return');

            case 18:
              _context.prev = 18;
              _context.next = 21;
              return compilerHost.compile(filePath);

            case 21:
              result = _context.sent;


              if (result.mimeType === 'text/html') {
                result.code = rigHtmlDocumentToInitializeElectronCompile(result.code);
              }

              if (!(result.binaryData || result.code instanceof Buffer)) {
                _context.next = 28;
                break;
              }

              finish({ data: result.binaryData || result.code, mimeType: result.mimeType });
              return _context.abrupt('return');

            case 28:
              finish({ data: new Buffer(result.code), mimeType: result.mimeType });
              return _context.abrupt('return');

            case 30:
              _context.next = 41;
              break;

            case 32:
              _context.prev = 32;
              _context.t0 = _context['catch'](18);
              err = 'Failed to compile ' + filePath + ': ' + _context.t0.message + '\n' + _context.t0.stack;

              d(err);

              if (!(_context.t0.errno === 34 /*ENOENT*/)) {
                _context.next = 39;
                break;
              }

              finish(-6); // net::ERR_FILE_NOT_FOUND
              return _context.abrupt('return');

            case 39:

              finish({ mimeType: 'text/plain', data: new Buffer(err) });
              return _context.abrupt('return');

            case 41:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this, [[18, 32]]);
    }));
    return function (_x, _x2) {
      return ref.apply(this, arguments);
    };
  }());
}
//# sourceMappingURL=data:application/json;base64,