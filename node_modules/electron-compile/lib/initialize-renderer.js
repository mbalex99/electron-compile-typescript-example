'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeRendererProcess = initializeRendererProcess;

require('./babel-maybefill');

var _compilerHost = require('./compiler-host');

var _compilerHost2 = _interopRequireDefault(_compilerHost);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NB: These are duped in protocol-hook so we can save startup time, make
// sure to run both!
var magicGlobalForRootCacheDir = '__electron_compile_root_cache_dir';
var magicGlobalForAppRootDir = '__electron_compile_app_root_dir';

var d = require('debug')('electron-compile:initialize-renderer');

var rendererInitialized = false;

/**
 * Called by our rigged script file at the top of every HTML file to set up
 * the same compilers as the browser process that created us
 *
 * @private
 */
function initializeRendererProcess(readOnlyMode) {
  if (rendererInitialized) return;

  // NB: If we don't do this, we'll get a renderer crash if you enable debug
  require('debug/browser');

  var rootCacheDir = require('electron').remote.getGlobal(magicGlobalForRootCacheDir);
  var appRoot = require('electron').remote.getGlobal(magicGlobalForAppRootDir);
  var compilerHost = null;

  // NB: This has to be synchronous because we need to block HTML parsing
  // until we're set up
  if (readOnlyMode) {
    d('Setting up electron-compile in precompiled mode with cache dir: ' + rootCacheDir);
    compilerHost = _compilerHost2.default.createReadonlyFromConfigurationSync(rootCacheDir, appRoot);
  } else {
    d('Setting up electron-compile in development mode with cache dir: ' + rootCacheDir);

    var _require = require('./config-parser');

    var createCompilers = _require.createCompilers;

    var compilersByMimeType = createCompilers();

    compilerHost = _compilerHost2.default.createFromConfigurationSync(rootCacheDir, appRoot, compilersByMimeType);
  }

  require('./x-require');
  require('./require-hook').default(compilerHost);
  rendererInitialized = true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbml0aWFsaXplLXJlbmRlcmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBa0JnQix5QixHQUFBLHlCOztBQWxCaEI7O0FBQ0E7Ozs7Ozs7O0FBSUEsSUFBTSw2QkFBNkIsbUNBQW5DO0FBQ0EsSUFBTSwyQkFBMkIsaUNBQWpDOztBQUVBLElBQU0sSUFBSSxRQUFRLE9BQVIsRUFBaUIsc0NBQWpCLENBQVY7O0FBRUEsSUFBSSxzQkFBc0IsS0FBMUI7Ozs7Ozs7O0FBUU8sU0FBUyx5QkFBVCxDQUFtQyxZQUFuQyxFQUFpRDtBQUN0RCxNQUFJLG1CQUFKLEVBQXlCOzs7QUFHekIsVUFBUSxlQUFSOztBQUVBLE1BQUksZUFBZSxRQUFRLFVBQVIsRUFBb0IsTUFBcEIsQ0FBMkIsU0FBM0IsQ0FBcUMsMEJBQXJDLENBQW5CO0FBQ0EsTUFBSSxVQUFVLFFBQVEsVUFBUixFQUFvQixNQUFwQixDQUEyQixTQUEzQixDQUFxQyx3QkFBckMsQ0FBZDtBQUNBLE1BQUksZUFBZSxJQUFuQjs7OztBQUlBLE1BQUksWUFBSixFQUFrQjtBQUNoQiwyRUFBcUUsWUFBckU7QUFDQSxtQkFBZSx1QkFBYSxtQ0FBYixDQUFpRCxZQUFqRCxFQUErRCxPQUEvRCxDQUFmO0FBQ0QsR0FIRCxNQUdPO0FBQ0wsMkVBQXFFLFlBQXJFOztBQURLLG1CQUV1QixRQUFRLGlCQUFSLENBRnZCOztBQUFBLFFBRUcsZUFGSCxZQUVHLGVBRkg7O0FBR0wsUUFBTSxzQkFBc0IsaUJBQTVCOztBQUVBLG1CQUFlLHVCQUFhLDJCQUFiLENBQXlDLFlBQXpDLEVBQXVELE9BQXZELEVBQWdFLG1CQUFoRSxDQUFmO0FBQ0Q7O0FBRUQsVUFBUSxhQUFSO0FBQ0EsVUFBUSxnQkFBUixFQUEwQixPQUExQixDQUFrQyxZQUFsQztBQUNBLHdCQUFzQixJQUF0QjtBQUNEIiwiZmlsZSI6ImluaXRpYWxpemUtcmVuZGVyZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vYmFiZWwtbWF5YmVmaWxsJztcclxuaW1wb3J0IENvbXBpbGVySG9zdCBmcm9tICcuL2NvbXBpbGVyLWhvc3QnO1xyXG5cclxuLy8gTkI6IFRoZXNlIGFyZSBkdXBlZCBpbiBwcm90b2NvbC1ob29rIHNvIHdlIGNhbiBzYXZlIHN0YXJ0dXAgdGltZSwgbWFrZVxyXG4vLyBzdXJlIHRvIHJ1biBib3RoIVxyXG5jb25zdCBtYWdpY0dsb2JhbEZvclJvb3RDYWNoZURpciA9ICdfX2VsZWN0cm9uX2NvbXBpbGVfcm9vdF9jYWNoZV9kaXInO1xyXG5jb25zdCBtYWdpY0dsb2JhbEZvckFwcFJvb3REaXIgPSAnX19lbGVjdHJvbl9jb21waWxlX2FwcF9yb290X2Rpcic7XHJcblxyXG5jb25zdCBkID0gcmVxdWlyZSgnZGVidWcnKSgnZWxlY3Ryb24tY29tcGlsZTppbml0aWFsaXplLXJlbmRlcmVyJyk7XHJcblxyXG5sZXQgcmVuZGVyZXJJbml0aWFsaXplZCA9IGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIENhbGxlZCBieSBvdXIgcmlnZ2VkIHNjcmlwdCBmaWxlIGF0IHRoZSB0b3Agb2YgZXZlcnkgSFRNTCBmaWxlIHRvIHNldCB1cFxyXG4gKiB0aGUgc2FtZSBjb21waWxlcnMgYXMgdGhlIGJyb3dzZXIgcHJvY2VzcyB0aGF0IGNyZWF0ZWQgdXNcclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplUmVuZGVyZXJQcm9jZXNzKHJlYWRPbmx5TW9kZSkge1xyXG4gIGlmIChyZW5kZXJlckluaXRpYWxpemVkKSByZXR1cm47XHJcblxyXG4gIC8vIE5COiBJZiB3ZSBkb24ndCBkbyB0aGlzLCB3ZSdsbCBnZXQgYSByZW5kZXJlciBjcmFzaCBpZiB5b3UgZW5hYmxlIGRlYnVnXHJcbiAgcmVxdWlyZSgnZGVidWcvYnJvd3NlcicpO1xyXG5cclxuICBsZXQgcm9vdENhY2hlRGlyID0gcmVxdWlyZSgnZWxlY3Ryb24nKS5yZW1vdGUuZ2V0R2xvYmFsKG1hZ2ljR2xvYmFsRm9yUm9vdENhY2hlRGlyKTtcclxuICBsZXQgYXBwUm9vdCA9IHJlcXVpcmUoJ2VsZWN0cm9uJykucmVtb3RlLmdldEdsb2JhbChtYWdpY0dsb2JhbEZvckFwcFJvb3REaXIpO1xyXG4gIGxldCBjb21waWxlckhvc3QgPSBudWxsO1xyXG5cclxuICAvLyBOQjogVGhpcyBoYXMgdG8gYmUgc3luY2hyb25vdXMgYmVjYXVzZSB3ZSBuZWVkIHRvIGJsb2NrIEhUTUwgcGFyc2luZ1xyXG4gIC8vIHVudGlsIHdlJ3JlIHNldCB1cFxyXG4gIGlmIChyZWFkT25seU1vZGUpIHtcclxuICAgIGQoYFNldHRpbmcgdXAgZWxlY3Ryb24tY29tcGlsZSBpbiBwcmVjb21waWxlZCBtb2RlIHdpdGggY2FjaGUgZGlyOiAke3Jvb3RDYWNoZURpcn1gKTtcclxuICAgIGNvbXBpbGVySG9zdCA9IENvbXBpbGVySG9zdC5jcmVhdGVSZWFkb25seUZyb21Db25maWd1cmF0aW9uU3luYyhyb290Q2FjaGVEaXIsIGFwcFJvb3QpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkKGBTZXR0aW5nIHVwIGVsZWN0cm9uLWNvbXBpbGUgaW4gZGV2ZWxvcG1lbnQgbW9kZSB3aXRoIGNhY2hlIGRpcjogJHtyb290Q2FjaGVEaXJ9YCk7XHJcbiAgICBjb25zdCB7IGNyZWF0ZUNvbXBpbGVycyB9ID0gcmVxdWlyZSgnLi9jb25maWctcGFyc2VyJyk7XHJcbiAgICBjb25zdCBjb21waWxlcnNCeU1pbWVUeXBlID0gY3JlYXRlQ29tcGlsZXJzKCk7XHJcblxyXG4gICAgY29tcGlsZXJIb3N0ID0gQ29tcGlsZXJIb3N0LmNyZWF0ZUZyb21Db25maWd1cmF0aW9uU3luYyhyb290Q2FjaGVEaXIsIGFwcFJvb3QsIGNvbXBpbGVyc0J5TWltZVR5cGUpO1xyXG4gIH1cclxuXHJcbiAgcmVxdWlyZSgnLi94LXJlcXVpcmUnKTtcclxuICByZXF1aXJlKCcuL3JlcXVpcmUtaG9vaycpLmRlZmF1bHQoY29tcGlsZXJIb3N0KTtcclxuICByZW5kZXJlckluaXRpYWxpemVkID0gdHJ1ZTtcclxufVxyXG4iXX0=