"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * This class is the base interface for compilers that are used by 
 * electron-compile. If your compiler library only supports a 
 * synchronous API, use SimpleCompilerBase instead.
 *
 * @interface
 */

var CompilerBase = exports.CompilerBase = function () {
  function CompilerBase() {
    _classCallCheck(this, CompilerBase);

    this.compilerOptions = {};
  }

  /**  
   * This method describes the MIME types that your compiler supports as input. 
   * Many precompiled file types don't have a specific MIME type, so if it's not
   * recognized by the mime-types package, you need to patch rig-mime-types in
   * electron-compile.
   *
   * @return {string[]}  An array of MIME types that this compiler can compile.
   *
   * @abstract
   */


  _createClass(CompilerBase, [{
    key: "shouldCompileFile",


    /**
     * Determines whether a file should be compiled
     *    
     * @param  {string} fileName        The full path of a file to compile.
     * @param  {object} compilerContext An object that compilers can add extra
                                      information to as part of a job - the caller
                                      won't do anything with this.
     * @return {Promise<bool>}        True if you are able to compile this file.
     *
     * @abstract
     */
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(fileName, compilerContext) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error("Implement me!");

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function shouldCompileFile(_x, _x2) {
        return ref.apply(this, arguments);
      }

      return shouldCompileFile;
    }()

    /**  
     * Returns the dependent files of this file. This is used for languages such
     * as LESS which allow you to import / reference other related files. In future
     * versions of electron-compile, we will use this information to invalidate
     * all of the parent files if a child file changes.
     *    
     * @param  {string} sourceCode    The contents of filePath
     * @param  {string} fileName        The full path of a file to compile.
     * @param  {object} compilerContext An object that compilers can add extra
                                      information to as part of a job - the caller
                                      won't do anything with this.
     * @return {Promise<string[]>}    An array of dependent file paths, or an empty
     *                                array if there are no dependent files. 
     *
     * @abstract
     */

  }, {
    key: "determineDependentFiles",
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(sourceCode, fileName, compilerContext) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new Error("Implement me!");

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function determineDependentFiles(_x3, _x4, _x5) {
        return ref.apply(this, arguments);
      }

      return determineDependentFiles;
    }()

    /**  
     * Compiles the file
     *    
     * @param  {string} sourceCode    The contents of filePath
     * @param  {string} fileName      The full path of a file to compile.
     * @param  {object} compilerContext An object that compilers can add extra
                                      information to as part of a job - the caller
                                      won't do anything with this.
     * @return {Promise<object>}      An object representing the compiled result
     * @property {string} code        The compiled code
     * @property {string} mimeType    The MIME type of the compiled result, which 
     *                                should exist in the mime-types database.
     *
     * @abstract
     */

  }, {
    key: "compile",
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(sourceCode, fileName, compilerContext) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw new Error("Implement me!");

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function compile(_x6, _x7, _x8) {
        return ref.apply(this, arguments);
      }

      return compile;
    }()
  }, {
    key: "shouldCompileFileSync",
    value: function shouldCompileFileSync(fileName, compilerContext) {
      throw new Error("Implement me!");
    }
  }, {
    key: "determineDependentFilesSync",
    value: function determineDependentFilesSync(sourceCode, fileName, compilerContext) {
      throw new Error("Implement me!");
    }
  }, {
    key: "compileSync",
    value: function compileSync(sourceCode, fileName, compilerContext) {
      throw new Error("Implement me!");
    }

    /**
     * Returns a version number representing the version of the underlying 
     * compiler library. When this number changes, electron-compile knows
     * to throw all away its generated code.
     *    
     * @return {string}  A version number. Note that this string isn't 
     *                   parsed in any way, just compared to the previous
     *                   one for equality.
     *
     * @abstract
     */

  }, {
    key: "getCompilerVersion",
    value: function getCompilerVersion() {
      throw new Error("Implement me!");
    }
  }], [{
    key: "getInputMimeTypes",
    value: function getInputMimeTypes() {
      throw new Error("Implement me!");
    }
  }]);

  return CompilerBase;
}();

/**
 * This class implements all of the async methods of CompilerBase by just 
 * calling the sync version. Use it to save some time when implementing 
 * simple compilers.
 *
 * To use it, implement the compile method, the getCompilerVersion method, 
 * and the getInputMimeTypes static method. 
 * 
 * @abstract
 */


var SimpleCompilerBase = exports.SimpleCompilerBase = function (_CompilerBase) {
  _inherits(SimpleCompilerBase, _CompilerBase);

  function SimpleCompilerBase() {
    _classCallCheck(this, SimpleCompilerBase);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(SimpleCompilerBase).call(this));
  }

  _createClass(SimpleCompilerBase, [{
    key: "shouldCompileFile",
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(fileName, compilerContext) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", true);

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function shouldCompileFile(_x9, _x10) {
        return ref.apply(this, arguments);
      }

      return shouldCompileFile;
    }()
  }, {
    key: "determineDependentFiles",
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(sourceCode, filePath, compilerContext) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", []);

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function determineDependentFiles(_x11, _x12, _x13) {
        return ref.apply(this, arguments);
      }

      return determineDependentFiles;
    }()
  }, {
    key: "compile",
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(sourceCode, filePath, compilerContext) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", this.compileSync(sourceCode, filePath, compilerContext));

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function compile(_x14, _x15, _x16) {
        return ref.apply(this, arguments);
      }

      return compile;
    }()
  }, {
    key: "shouldCompileFileSync",
    value: function shouldCompileFileSync(fileName, compilerContext) {
      return true;
    }
  }, {
    key: "determineDependentFilesSync",
    value: function determineDependentFilesSync(sourceCode, filePath, compilerContext) {
      return [];
    }
  }]);

  return SimpleCompilerBase;
}(CompilerBase);