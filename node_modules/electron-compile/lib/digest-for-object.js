'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports.default = createDigestForObject;

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateDigestForJsonValue(shasum, value) {
  // Implmentation is similar to that of pretty-printing a JSON object, except:
  // * Strings are not escaped.
  // * No effort is made to avoid trailing commas.
  // These shortcuts should not affect the correctness of this function.
  var type = typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value);

  if (type === 'string') {
    shasum.update('"', 'utf8');
    shasum.update(value, 'utf8');
    shasum.update('"', 'utf8');
    return;
  }

  if (type === 'boolean' || type === 'number') {
    shasum.update(value.toString(), 'utf8');
    return;
  }

  if (!value) {
    shasum.update('null', 'utf8');
    return;
  }

  if (Array.isArray(value)) {
    shasum.update('[', 'utf8');
    for (var i = 0; i < value.length; i++) {
      updateDigestForJsonValue(shasum, value[i]);
      shasum.update(',', 'utf8');
    }
    shasum.update(']', 'utf8');
    return;
  }

  // value must be an object: be sure to sort the keys.
  var keys = (0, _keys2.default)(value);
  keys.sort();

  shasum.update('{', 'utf8');

  for (var _i = 0; _i < keys.length; _i++) {
    updateDigestForJsonValue(shasum, keys[_i]);
    shasum.update(': ', 'utf8');
    updateDigestForJsonValue(shasum, value[keys[_i]]);
    shasum.update(',', 'utf8');
  }

  shasum.update('}', 'utf8');
}

/**
 * Creates a hash from a JS object
 * 
 * @private  
 */
function createDigestForObject(obj) {
  var sha1 = _crypto2.default.createHash('sha1');
  updateDigestForJsonValue(sha1, obj);

  return sha1.digest('hex');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kaWdlc3QtZm9yLW9iamVjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztrQkEwRHdCLHFCOztBQTFEeEI7Ozs7OztBQUVBLFNBQVMsd0JBQVQsQ0FBa0MsTUFBbEMsRUFBMEMsS0FBMUMsRUFBaUQ7Ozs7O0FBSy9DLE1BQU0sY0FBYyxLQUFkLHVEQUFjLEtBQWQsQ0FBTjs7QUFFQSxNQUFJLFNBQVMsUUFBYixFQUF1QjtBQUNyQixXQUFPLE1BQVAsQ0FBYyxHQUFkLEVBQW1CLE1BQW5CO0FBQ0EsV0FBTyxNQUFQLENBQWMsS0FBZCxFQUFxQixNQUFyQjtBQUNBLFdBQU8sTUFBUCxDQUFjLEdBQWQsRUFBbUIsTUFBbkI7QUFDQTtBQUNEOztBQUVELE1BQUksU0FBUyxTQUFULElBQXNCLFNBQVMsUUFBbkMsRUFBNkM7QUFDM0MsV0FBTyxNQUFQLENBQWMsTUFBTSxRQUFOLEVBQWQsRUFBZ0MsTUFBaEM7QUFDQTtBQUNEOztBQUVELE1BQUksQ0FBQyxLQUFMLEVBQVk7QUFDVixXQUFPLE1BQVAsQ0FBYyxNQUFkLEVBQXNCLE1BQXRCO0FBQ0E7QUFDRDs7QUFFRCxNQUFJLE1BQU0sT0FBTixDQUFjLEtBQWQsQ0FBSixFQUEwQjtBQUN4QixXQUFPLE1BQVAsQ0FBYyxHQUFkLEVBQW1CLE1BQW5CO0FBQ0EsU0FBSyxJQUFJLElBQUUsQ0FBWCxFQUFjLElBQUksTUFBTSxNQUF4QixFQUFnQyxHQUFoQyxFQUFxQztBQUNuQywrQkFBeUIsTUFBekIsRUFBaUMsTUFBTSxDQUFOLENBQWpDO0FBQ0EsYUFBTyxNQUFQLENBQWMsR0FBZCxFQUFtQixNQUFuQjtBQUNEO0FBQ0QsV0FBTyxNQUFQLENBQWMsR0FBZCxFQUFtQixNQUFuQjtBQUNBO0FBQ0Q7OztBQUdELE1BQUksT0FBTyxvQkFBWSxLQUFaLENBQVg7QUFDQSxPQUFLLElBQUw7O0FBRUEsU0FBTyxNQUFQLENBQWMsR0FBZCxFQUFtQixNQUFuQjs7QUFFQSxPQUFLLElBQUksS0FBRSxDQUFYLEVBQWMsS0FBSSxLQUFLLE1BQXZCLEVBQStCLElBQS9CLEVBQW9DO0FBQ2xDLDZCQUF5QixNQUF6QixFQUFpQyxLQUFLLEVBQUwsQ0FBakM7QUFDQSxXQUFPLE1BQVAsQ0FBYyxJQUFkLEVBQW9CLE1BQXBCO0FBQ0EsNkJBQXlCLE1BQXpCLEVBQWlDLE1BQU0sS0FBSyxFQUFMLENBQU4sQ0FBakM7QUFDQSxXQUFPLE1BQVAsQ0FBYyxHQUFkLEVBQW1CLE1BQW5CO0FBQ0Q7O0FBRUQsU0FBTyxNQUFQLENBQWMsR0FBZCxFQUFtQixNQUFuQjtBQUNEOzs7Ozs7O0FBUWMsU0FBUyxxQkFBVCxDQUErQixHQUEvQixFQUFvQztBQUNqRCxNQUFJLE9BQU8saUJBQU8sVUFBUCxDQUFrQixNQUFsQixDQUFYO0FBQ0EsMkJBQXlCLElBQXpCLEVBQStCLEdBQS9COztBQUVBLFNBQU8sS0FBSyxNQUFMLENBQVksS0FBWixDQUFQO0FBQ0QiLCJmaWxlIjoiZGlnZXN0LWZvci1vYmplY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVEaWdlc3RGb3JKc29uVmFsdWUoc2hhc3VtLCB2YWx1ZSkge1xyXG4gIC8vIEltcGxtZW50YXRpb24gaXMgc2ltaWxhciB0byB0aGF0IG9mIHByZXR0eS1wcmludGluZyBhIEpTT04gb2JqZWN0LCBleGNlcHQ6XHJcbiAgLy8gKiBTdHJpbmdzIGFyZSBub3QgZXNjYXBlZC5cclxuICAvLyAqIE5vIGVmZm9ydCBpcyBtYWRlIHRvIGF2b2lkIHRyYWlsaW5nIGNvbW1hcy5cclxuICAvLyBUaGVzZSBzaG9ydGN1dHMgc2hvdWxkIG5vdCBhZmZlY3QgdGhlIGNvcnJlY3RuZXNzIG9mIHRoaXMgZnVuY3Rpb24uXHJcbiAgY29uc3QgdHlwZSA9IHR5cGVvZih2YWx1ZSk7XHJcblxyXG4gIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgc2hhc3VtLnVwZGF0ZSgnXCInLCAndXRmOCcpO1xyXG4gICAgc2hhc3VtLnVwZGF0ZSh2YWx1ZSwgJ3V0ZjgnKTtcclxuICAgIHNoYXN1bS51cGRhdGUoJ1wiJywgJ3V0ZjgnKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlID09PSAnYm9vbGVhbicgfHwgdHlwZSA9PT0gJ251bWJlcicpIHtcclxuICAgIHNoYXN1bS51cGRhdGUodmFsdWUudG9TdHJpbmcoKSwgJ3V0ZjgnKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmICghdmFsdWUpIHtcclxuICAgIHNoYXN1bS51cGRhdGUoJ251bGwnLCAndXRmOCcpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICBzaGFzdW0udXBkYXRlKCdbJywgJ3V0ZjgnKTtcclxuICAgIGZvciAobGV0IGk9MDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHVwZGF0ZURpZ2VzdEZvckpzb25WYWx1ZShzaGFzdW0sIHZhbHVlW2ldKTtcclxuICAgICAgc2hhc3VtLnVwZGF0ZSgnLCcsICd1dGY4Jyk7XHJcbiAgICB9XHJcbiAgICBzaGFzdW0udXBkYXRlKCddJywgJ3V0ZjgnKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0OiBiZSBzdXJlIHRvIHNvcnQgdGhlIGtleXMuXHJcbiAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XHJcbiAga2V5cy5zb3J0KCk7XHJcblxyXG4gIHNoYXN1bS51cGRhdGUoJ3snLCAndXRmOCcpO1xyXG5cclxuICBmb3IgKGxldCBpPTA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB1cGRhdGVEaWdlc3RGb3JKc29uVmFsdWUoc2hhc3VtLCBrZXlzW2ldKTtcclxuICAgIHNoYXN1bS51cGRhdGUoJzogJywgJ3V0ZjgnKTtcclxuICAgIHVwZGF0ZURpZ2VzdEZvckpzb25WYWx1ZShzaGFzdW0sIHZhbHVlW2tleXNbaV1dKTtcclxuICAgIHNoYXN1bS51cGRhdGUoJywnLCAndXRmOCcpO1xyXG4gIH1cclxuXHJcbiAgc2hhc3VtLnVwZGF0ZSgnfScsICd1dGY4Jyk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGhhc2ggZnJvbSBhIEpTIG9iamVjdFxyXG4gKiBcclxuICogQHByaXZhdGUgIFxyXG4gKi8gXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZURpZ2VzdEZvck9iamVjdChvYmopIHtcclxuICBsZXQgc2hhMSA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJyk7XHJcbiAgdXBkYXRlRGlnZXN0Rm9ySnNvblZhbHVlKHNoYTEsIG9iaik7XHJcbiAgXHJcbiAgcmV0dXJuIHNoYTEuZGlnZXN0KCdoZXgnKTtcclxufVxyXG4iXX0=