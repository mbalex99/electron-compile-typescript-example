'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _compilerBase = require('../compiler-base');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var inputMimeTypes = ['text/typescript'];
var tss = null;

/**
 * @access private
 */

var TypeScriptCompiler = function (_SimpleCompilerBase) {
  _inherits(TypeScriptCompiler, _SimpleCompilerBase);

  function TypeScriptCompiler() {
    _classCallCheck(this, TypeScriptCompiler);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TypeScriptCompiler).call(this));

    _this.compilerOptions.sourceMap = true;

    _this.compilerOptions = {
      module: 'commonjs',
      sourceMap: true
    };
    return _this;
  }

  _createClass(TypeScriptCompiler, [{
    key: 'compileSync',
    value: function compileSync(sourceCode, filePath) {
      tss = tss || require('typescript-simple');

      // NB: Work around TypeScriptSimple modifying the options object
      var compiler = new tss.TypeScriptSimple(_lodash2.default.assign({}, this.compilerOptions));

      return {
        code: compiler.compile(sourceCode, filePath),
        mimeType: 'application/javascript'
      };
    }
  }, {
    key: 'getCompilerVersion',
    value: function getCompilerVersion() {
      return require('typescript-simple/package.json').version;
    }
  }], [{
    key: 'getInputMimeTypes',
    value: function getInputMimeTypes() {
      return inputMimeTypes;
    }
  }]);

  return TypeScriptCompiler;
}(_compilerBase.SimpleCompilerBase);

exports.default = TypeScriptCompiler;