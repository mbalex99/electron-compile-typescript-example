'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _compilerBase = require('../compiler-base');

var _extend = require('lodash/object/extend');

var _extend2 = _interopRequireDefault(_extend);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mimeTypes = ['text/stylus'];
var stylusjs = null;

/**
 * @access private
 */

var StylusCompiler = function (_CompilerBase) {
  _inherits(StylusCompiler, _CompilerBase);

  function StylusCompiler() {
    _classCallCheck(this, StylusCompiler);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StylusCompiler).call(this));

    _this.compilerOptions = {
      sourcemap: true
    };
    return _this;
  }

  _createClass(StylusCompiler, [{
    key: 'shouldCompileFile',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(fileName, compilerContext) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt('return', true);

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function shouldCompileFile(_x, _x2) {
        return ref.apply(this, arguments);
      }

      return shouldCompileFile;
    }()
  }, {
    key: 'determineDependentFiles',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(sourceCode, filePath, compilerContext) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', []);

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function determineDependentFiles(_x3, _x4, _x5) {
        return ref.apply(this, arguments);
      }

      return determineDependentFiles;
    }()
  }, {
    key: 'compile',
    value: function () {
      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(sourceCode, filePath, compilerContext) {
        var opts, code;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                stylusjs = stylusjs || require('stylus');

                opts = (0, _extend2.default)({}, this.compilerOptions, {
                  filename: _path2.default.basename(filePath)
                });
                _context3.next = 4;
                return new Promise(function (res, rej) {
                  stylusjs.render(sourceCode, opts, function (err, css) {
                    if (err) {
                      rej(err);
                    } else {
                      res(css);
                    }
                  });
                });

              case 4:
                code = _context3.sent;
                return _context3.abrupt('return', {
                  code: code, mimeType: 'text/css'
                });

              case 6:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function compile(_x6, _x7, _x8) {
        return ref.apply(this, arguments);
      }

      return compile;
    }()
  }, {
    key: 'shouldCompileFileSync',
    value: function shouldCompileFileSync(fileName, compilerContext) {
      return true;
    }
  }, {
    key: 'determineDependentFilesSync',
    value: function determineDependentFilesSync(sourceCode, filePath, compilerContext) {
      return [];
    }
  }, {
    key: 'compileSync',
    value: function compileSync(sourceCode, filePath, compilerContext) {
      stylusjs = stylusjs || require('stylus');

      var opts = (0, _extend2.default)({}, this.compilerOptions, {
        filename: _path2.default.basename(filePath)
      });

      return {
        code: stylusjs.render(sourceCode, opts),
        mimeType: 'text/css'
      };
    }
  }, {
    key: 'getCompilerVersion',
    value: function getCompilerVersion() {
      return require('stylus/package.json').version;
    }
  }], [{
    key: 'getInputMimeTypes',
    value: function getInputMimeTypes() {
      return mimeTypes;
    }
  }]);

  return StylusCompiler;
}(_compilerBase.CompilerBase);

exports.default = StylusCompiler;